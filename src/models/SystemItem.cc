/**
 *
 *  SystemItem.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SystemItem.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string SystemItem::Cols::_id = "id";
const std::string SystemItem::Cols::_url = "url";
const std::string SystemItem::Cols::_date = "date";
const std::string SystemItem::Cols::_parentId = "parentId";
const std::string SystemItem::Cols::_type = "type";
const std::string SystemItem::Cols::_size = "size";
const std::string SystemItem::Cols::_children = "children";
const std::string SystemItem::primaryKeyName = "id";
const bool SystemItem::hasPrimaryKey = true;
const std::string SystemItem::tableName = "system_item";

const std::vector<typename SystemItem::MetaData> SystemItem::metaData_={
{"id","std::string","text",0,0,1,0},
{"url","std::string","text",0,0,0,0},
{"date","std::string","text",0,0,0,1},
{"parentId","std::string","text",0,0,0,0},
{"type","std::string","text",0,0,0,1},
{"size","std::string","text",0,0,0,0},
{"children","std::string","text",0,0,0,0}
};
const std::string &SystemItem::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SystemItem::SystemItem(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["url"].isNull())
        {
            url_=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["date"].isNull())
        {
            date_=std::make_shared<std::string>(r["date"].as<std::string>());
        }
        if(!r["parentId"].isNull())
        {
            parentid_=std::make_shared<std::string>(r["parentId"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["size"].isNull())
        {
            size_=std::make_shared<std::string>(r["size"].as<std::string>());
        }
        if(!r["children"].isNull())
        {
            children_=std::make_shared<std::string>(r["children"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            url_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            date_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            parentid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            size_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            children_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

SystemItem::SystemItem(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            date_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            parentid_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            size_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            children_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

SystemItem::SystemItem(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["date"].isNull())
        {
            date_=std::make_shared<std::string>(pJson["date"].asString());
        }
    }
    if(pJson.isMember("parentId"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["parentId"].isNull())
        {
            parentid_=std::make_shared<std::string>(pJson["parentId"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("size"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["size"].isNull())
        {
            size_=std::make_shared<std::string>(pJson["size"].asString());
        }
    }
    if(pJson.isMember("children"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["children"].isNull())
        {
            children_=std::make_shared<std::string>(pJson["children"].asString());
        }
    }
}

void SystemItem::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            date_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            parentid_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            size_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            children_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void SystemItem::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["date"].isNull())
        {
            date_=std::make_shared<std::string>(pJson["date"].asString());
        }
    }
    if(pJson.isMember("parentId"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["parentId"].isNull())
        {
            parentid_=std::make_shared<std::string>(pJson["parentId"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("size"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["size"].isNull())
        {
            size_=std::make_shared<std::string>(pJson["size"].asString());
        }
    }
    if(pJson.isMember("children"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["children"].isNull())
        {
            children_=std::make_shared<std::string>(pJson["children"].asString());
        }
    }
}

const std::string &SystemItem::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getId() const noexcept
{
    return id_;
}
void SystemItem::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void SystemItem::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
void SystemItem::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename SystemItem::PrimaryKeyType & SystemItem::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &SystemItem::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(url_)
        return *url_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getUrl() const noexcept
{
    return url_;
}
void SystemItem::setUrl(const std::string &pUrl) noexcept
{
    url_ = std::make_shared<std::string>(pUrl);
    dirtyFlag_[1] = true;
}
void SystemItem::setUrl(std::string &&pUrl) noexcept
{
    url_ = std::make_shared<std::string>(std::move(pUrl));
    dirtyFlag_[1] = true;
}
void SystemItem::setUrlToNull() noexcept
{
    url_.reset();
    dirtyFlag_[1] = true;
}

const std::string &SystemItem::getValueOfDate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getDate() const noexcept
{
    return date_;
}
void SystemItem::setDate(const std::string &pDate) noexcept
{
    date_ = std::make_shared<std::string>(pDate);
    dirtyFlag_[2] = true;
}
void SystemItem::setDate(std::string &&pDate) noexcept
{
    date_ = std::make_shared<std::string>(std::move(pDate));
    dirtyFlag_[2] = true;
}

const std::string &SystemItem::getValueOfParentid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(parentid_)
        return *parentid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getParentid() const noexcept
{
    return parentid_;
}
void SystemItem::setParentid(const std::string &pParentid) noexcept
{
    parentid_ = std::make_shared<std::string>(pParentid);
    dirtyFlag_[3] = true;
}
void SystemItem::setParentid(std::string &&pParentid) noexcept
{
    parentid_ = std::make_shared<std::string>(std::move(pParentid));
    dirtyFlag_[3] = true;
}
void SystemItem::setParentidToNull() noexcept
{
    parentid_.reset();
    dirtyFlag_[3] = true;
}

const std::string &SystemItem::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getType() const noexcept
{
    return type_;
}
void SystemItem::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[4] = true;
}
void SystemItem::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[4] = true;
}

const std::string &SystemItem::getValueOfSize() const noexcept
{
    const static std::string defaultValue = std::string();
    if(size_)
        return *size_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getSize() const noexcept
{
    return size_;
}
void SystemItem::setSize(const std::string &pSize) noexcept
{
    size_ = std::make_shared<std::string>(pSize);
    dirtyFlag_[5] = true;
}
void SystemItem::setSize(std::string &&pSize) noexcept
{
    size_ = std::make_shared<std::string>(std::move(pSize));
    dirtyFlag_[5] = true;
}
void SystemItem::setSizeToNull() noexcept
{
    size_.reset();
    dirtyFlag_[5] = true;
}

const std::string &SystemItem::getValueOfChildren() const noexcept
{
    const static std::string defaultValue = std::string();
    if(children_)
        return *children_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SystemItem::getChildren() const noexcept
{
    return children_;
}
void SystemItem::setChildren(const std::string &pChildren) noexcept
{
    children_ = std::make_shared<std::string>(pChildren);
    dirtyFlag_[6] = true;
}
void SystemItem::setChildren(std::string &&pChildren) noexcept
{
    children_ = std::make_shared<std::string>(std::move(pChildren));
    dirtyFlag_[6] = true;
}
void SystemItem::setChildrenToNull() noexcept
{
    children_.reset();
    dirtyFlag_[6] = true;
}

void SystemItem::updateId(const uint64_t id)
{
}

const std::vector<std::string> &SystemItem::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "url",
        "date",
        "parentId",
        "type",
        "size",
        "children"
    };
    return inCols;
}

void SystemItem::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getParentid())
        {
            binder << getValueOfParentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSize())
        {
            binder << getValueOfSize();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getChildren())
        {
            binder << getValueOfChildren();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SystemItem::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void SystemItem::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getParentid())
        {
            binder << getValueOfParentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSize())
        {
            binder << getValueOfSize();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getChildren())
        {
            binder << getValueOfChildren();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SystemItem::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getValueOfDate();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    if(getParentid())
    {
        ret["parentId"]=getValueOfParentid();
    }
    else
    {
        ret["parentId"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getSize())
    {
        ret["size"]=getValueOfSize();
    }
    else
    {
        ret["size"]=Json::Value();
    }
    if(getChildren())
    {
        ret["children"]=getValueOfChildren();
    }
    else
    {
        ret["children"]=Json::Value();
    }
    return ret;
}

Json::Value SystemItem::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUrl())
            {
                ret[pMasqueradingVector[1]]=getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[2]]=getValueOfDate();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getParentid())
            {
                ret[pMasqueradingVector[3]]=getValueOfParentid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[4]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSize())
            {
                ret[pMasqueradingVector[5]]=getValueOfSize();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getChildren())
            {
                ret[pMasqueradingVector[6]]=getValueOfChildren();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getValueOfDate();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    if(getParentid())
    {
        ret["parentId"]=getValueOfParentid();
    }
    else
    {
        ret["parentId"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getSize())
    {
        ret["size"]=getValueOfSize();
    }
    else
    {
        ret["size"]=Json::Value();
    }
    if(getChildren())
    {
        ret["children"]=getValueOfChildren();
    }
    else
    {
        ret["children"]=Json::Value();
    }
    return ret;
}

bool SystemItem::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(1, "url", pJson["url"], err, true))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(2, "date", pJson["date"], err, true))
            return false;
    }
    else
    {
        err="The date column cannot be null";
        return false;
    }
    if(pJson.isMember("parentId"))
    {
        if(!validJsonOfField(3, "parentId", pJson["parentId"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(4, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("size"))
    {
        if(!validJsonOfField(5, "size", pJson["size"], err, true))
            return false;
    }
    if(pJson.isMember("children"))
    {
        if(!validJsonOfField(6, "children", pJson["children"], err, true))
            return false;
    }
    return true;
}
bool SystemItem::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool SystemItem::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(1, "url", pJson["url"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(2, "date", pJson["date"], err, false))
            return false;
    }
    if(pJson.isMember("parentId"))
    {
        if(!validJsonOfField(3, "parentId", pJson["parentId"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(4, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("size"))
    {
        if(!validJsonOfField(5, "size", pJson["size"], err, false))
            return false;
    }
    if(pJson.isMember("children"))
    {
        if(!validJsonOfField(6, "children", pJson["children"], err, false))
            return false;
    }
    return true;
}
bool SystemItem::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool SystemItem::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
